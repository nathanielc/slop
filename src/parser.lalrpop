use crate::ast::{Operand,Recipe,SourceFile};


grammar;

pub SourceFile: SourceFile = {
    <Recipe+> => SourceFile{
        recipes: <>,
    }
}
Recipe: Recipe = { "<" <t:Title?> <p:Preamble?> <r:Operand> <c:Comment?> ">" => Recipe{
        title: t,
        preamble: p,
        root: r,
        comment: c,
    },
}

Title: String = {
    "**" <Sentence> => <>
}
Preamble: String = {
    "##" <Sentence> => <>
}
Comment: String = {
    "#*" <Sentence> => <>
}


Operand: Operand = {
    <Ingredient> => <>,
    <o:Operand> <s:UnaryOperator> => Operand::UnaryOp(Box::new(o), s),
    <l:Operand> <r:Operand> <s:BinaryOperator> => Operand::BinaryOp(Box::new(l), Box::new(r), s),
}

UnaryOperator: String = {
    "=" <Sentence> => <>
}

BinaryOperator: String = {
    "#" <Sentence> => <>
}

Ingredient: Operand = {
    "*" <d:"^"?> <m:Measure?> <n:Sentence> => {
        if let Some(m) = m {
            Operand::Ingredient{
                derived: d.is_some(),
                quantity: m.0,
                unit: m.1,
                name: n,
            }
        } else {
            Operand::Ingredient{
                derived: d.is_some(),
                quantity: None,
                unit: None,
                name: n,
            }
        }
    }
}

Measure: (Option<String>, Option<String>) = {
    <q:Quantity?> <u:Sentence?> ":" => {
        (q,u)
    }
}

Quantity: String = {
    quantity => <>.trim().to_string(),
}
Sentence: String = {
    sentence => <>.trim().to_string(),
}

match {
    "<",
    ">",
    "=",
    "#",
    ":",
    "*",
    "^",
    "**",
    "#*",
    "##",
} else {
    r"[-~0-9\./]+" => quantity,
} else {
    r"[^-^~0-9\./<>=#:*][^<>=#:*]*" => sentence,
}
