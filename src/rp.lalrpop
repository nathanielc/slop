use crate::ast::{Operand,Recipe};


grammar;


pub Recipe: Recipe = {
    "<" <t:Title?> <p:Preamble?> <r:Operand> ">" => Recipe{
        title: t,
        preamble: p,
        root: r,
    },
}

Title: String = {
    "**" <Sentence> => <>
}
Preamble: String = {
    "##" <Sentence> => <>
}


Operand: Operand = {
    <Ingredient> => Operand::Ingredient(<>),
    <o:Operand> <s:UnaryOperator> => Operand::UnaryOp(Box::new(o), s),
    <l:Operand> <r:Operand> <s:BinaryOperator> => Operand::BinaryOp(Box::new(l), Box::new(r), s),
}

UnaryOperator: String = {
    "=" <Sentence> => <>
}

BinaryOperator: String = {
    "#" <Sentence> => <>
}

Ingredient: String = {
    "*" <Sentence> => <>
}


Sentence: String = {
    r"[^*#=<>]+" => <>.trim().to_string()
}
